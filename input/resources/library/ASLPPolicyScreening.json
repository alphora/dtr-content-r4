{
  "resourceType": "Library",
  "id": "ASLPPolicyScreening",
  "contained": [ {
    "resourceType": "Parameters",
    "id": "options",
    "parameter": [ {
      "name": "translatorVersion",
      "valueString": "3.6.0"
    }, {
      "name": "option",
      "valueString": "EnableAnnotations"
    }, {
      "name": "option",
      "valueString": "EnableLocators"
    }, {
      "name": "option",
      "valueString": "EnableResultTypes"
    }, {
      "name": "option",
      "valueString": "DisableListDemotion"
    }, {
      "name": "option",
      "valueString": "DisableListPromotion"
    }, {
      "name": "format",
      "valueString": "JSON"
    }, {
      "name": "format",
      "valueString": "XML"
    }, {
      "name": "analyzeDataRequirements",
      "valueBoolean": false
    }, {
      "name": "collapseDataRequirements",
      "valueBoolean": true
    }, {
      "name": "compatibilityLevel",
      "valueString": "1.5"
    }, {
      "name": "enableCqlOnly",
      "valueBoolean": false
    }, {
      "name": "errorLevel",
      "valueString": "Info"
    }, {
      "name": "signatureLevel",
      "valueString": "All"
    }, {
      "name": "validateUnits",
      "valueBoolean": true
    }, {
      "name": "verifyOnly",
      "valueBoolean": false
    } ]
  } ],
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-cqlOptions",
    "valueReference": {
      "reference": "#options"
    }
  } ],
  "url": "http://example.org/sdh/dtr/aslp/Library/ASLPPolicyScreening",
  "name": "ASLPPolicyScreening",
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library Cx",
    "resource": "http://example.org/sdh/dtr/aslp/Library/ASLPConcepts"
  }, {
    "type": "depends-on",
    "display": "Library Dx",
    "resource": "http://example.org/sdh/dtr/aslp/Library/ASLPDataElements"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://example.org/sdh/dtr/aslp/Library/FHIRHelpers|4.1.000"
  }, {
    "type": "depends-on",
    "display": "Library PCF",
    "resource": "http://example.org/sdh/dtr/aslp/Library/ASLPPolicyCaseFeatures"
  }, {
    "type": "depends-on",
    "display": "Code system ICD10",
    "resource": "http://hl7.org/fhir/sid/icd-10-cm"
  }, {
    "type": "depends-on",
    "display": "Code system LOINC",
    "resource": "http://loinc.org"
  }, {
    "type": "depends-on",
    "display": "Code system SNOMEDCT",
    "resource": "http://snomed.info/sct"
  }, {
    "type": "depends-on",
    "display": "Code system CPT",
    "resource": "http://www.ama-assn.org/go/cpt"
  }, {
    "type": "depends-on",
    "display": "Code system ConditionVerificationStatusCodes",
    "resource": "http://terminology.hl7.org/CodeSystem/condition-ver-status"
  }, {
    "type": "depends-on",
    "display": "Code system ConditionClinicalStatusCodes",
    "resource": "http://terminology.hl7.org/CodeSystem/condition-clinical"
  }, {
    "type": "depends-on",
    "display": "Code system ObservationStatusCodes",
    "resource": "http://hl7.org/fhir/observation-status"
  }, {
    "type": "depends-on",
    "display": "Value set Excessive Daytime Sleepiness (Drowsiness) ValueSet",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1078.769"
  }, {
    "type": "depends-on",
    "display": "Value set Sleep Apnea Disorders ValueSet",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1222.102"
  }, {
    "type": "depends-on",
    "display": "Value set Home Sleep Study Devices",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/HomeSleepStudyDevices"
  }, {
    "type": "depends-on",
    "display": "Value set Chronic Obstructive Lung Disease (COPD)",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1219.6"
  }, {
    "type": "depends-on",
    "display": "Value set Asthma VS",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.362"
  }, {
    "type": "depends-on",
    "display": "Value set Forced Expiratory Volume in One Second (FEV1)Forced Vital Capacity (FVC) Measurement",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1219.124"
  }, {
    "type": "depends-on",
    "display": "Value set Past Medical History Condition Related to Need for Positive Airway Pressure Device",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1219.135"
  }, {
    "type": "depends-on",
    "display": "Value set Acute or Chronic Heart Failure Disorder",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1219.24"
  }, {
    "type": "depends-on",
    "display": "Value set Pulmonary Hypertension Disorder",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1219.93"
  }, {
    "type": "depends-on",
    "display": "Value set Heart Failure Diagnosis",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1222.1543"
  }, {
    "type": "depends-on",
    "display": "Value set COVID19 SNOMED Value Set for Muscular Dystrophy",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.3616.200.110.102.6183"
  }, {
    "type": "depends-on",
    "display": "Value set Hypoventilation Disorder VS",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1219.121"
  }, {
    "type": "depends-on",
    "display": "Value set Moderate to Severe Pulmonary Disease VS",
    "resource": "http://example.org/sdh/dtr/aslp/ValueSet/ModerateToSeverePulmonaryDisease"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Patient Age",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "integer"
  }, {
    "name": "Patient Age >= 18",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Excessive Daytime Sleepiness",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Has Excessive Daytime Sleepiness",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Epworth Sleepiness Scale",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Epworth Sleepiness Scale Score >= 10",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Has ESS Score GTE 10",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Has Excessive Sleepiness While Driving",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Loud Intense Snoring",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Nocturnal Apnea",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Excessive Daytime Sleepiness criteria",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Witnessed Loud Snoring",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Witnessed Nocturnal Apnea",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Qualifying Moderate To Severe Pulmonary Disease",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Diagnosed COPD",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Most Recent FEV1",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Observation"
  }, {
    "name": "Hypoventilation Disorder",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Diagnosed Asthma",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Neuromuscular Disease Diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Pulmonary Disease Diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Qualifying Cardiac Disease",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Evidence of Comorbid Medical Conditions",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Resource"
  }, {
    "name": "Most Recent FEV1 < 60",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Has Diagnosed Asthma",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Has Moderate To Severe Pulmonary Disease",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Neuromuscular Disease With Associated Pulmonary Disease",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Has Cardiac Disease",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Has Comorbid Medical Conditions",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Has No Comorbid Medical Conditions",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Moderate To Severe Pulmonary Disease Including COPD",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Has Diagnosed COPD",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Moderate To Severe Pulmonary Disease Including Asthma",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Qualified Device Request",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "DeviceRequest"
  }, {
    "name": "Qualified Device Observation",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Safe Use Of Equipment At Home Observation",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Physician Evaluated Results Observation",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "verificationStatus", "clinicalStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1219.6"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "verificationStatus", "clinicalStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1219.121"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "verificationStatus", "clinicalStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.3616.200.110.102.6183"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "verificationStatus", "clinicalStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1219.93"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "verificationStatus", "clinicalStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1078.769"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "verificationStatus", "clinicalStatus" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://hl7.org/fhir/sid/icd-10-cm",
        "code": "R06.83",
        "display": "Snoring"
      } ]
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "verificationStatus", "clinicalStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1222.102"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "verificationStatus", "clinicalStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.526.3.362"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "verificationStatus", "clinicalStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1222.1543"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://example.org/sdh/dtr/aslp/ValueSet/ModerateToSeverePulmonaryDisease"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1219.124"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "value", "status" ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status", "value" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://snomed.info/sct",
        "code": "763254009",
        "display": "Epworth Sleepiness Scale"
      } ]
    } ]
  }, {
    "type": "DeviceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/DeviceRequest" ],
    "mustSupport": [ "code", "status", "intent" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/HomeSleepStudyDevices"
    } ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}