{
  "resourceType": "Library",
  "id": "ASLPCrdRoutineLogic",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://example.org/sdh/dtr/aslp/Library/ASLPCrdRoutineLogic",
  "version": "0.1.0",
  "name": "ASLPCrdRoutineLogic",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library Ctx",
    "resource": "http://example.org/sdh/dtr/aslp/Library/ASLPContext"
  }, {
    "type": "depends-on",
    "display": "Library USCoreCommon",
    "resource": "http://example.org/sdh/dtr/aslp/Library/USCoreCommon"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://example.org/sdh/dtr/aslp/Library/FHIRHelpers|4.1.000"
  }, {
    "type": "depends-on",
    "display": "Library ECI",
    "resource": "http://example.org/sdh/dtr/aslp/Library/CrdExtendedCoverageInfo"
  }, {
    "type": "depends-on",
    "display": "Code system Payor Identifier CodeSystem",
    "resource": "http://terminology.hl7.org/CodeSystem/organization-type"
  }, {
    "type": "depends-on",
    "display": "Value set Routine Procedure Valueset",
    "resource": "http://terminology.smilecdr.com/cs/routine"
  } ],
  "parameter": [ {
    "name": "Request Id",
    "use": "in",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Title",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Description",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Qualification",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Detail Text",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "CoverageExtension",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Extension"
  }, {
    "name": "Routine Service Requests",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "Is Routine",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Not Routine",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "CodeableConcept",
    "profile": [ "http://hl7.org/fhir/CodeableConcept" ],
    "mustSupport": [ "coding" ]
  }, {
    "profile": [ "urn:hl7-org:elm-types:r1/Code" ],
    "mustSupport": [ "display" ]
  }, {
    "type": "Coverage",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Coverage" ]
  }, {
    "type": "Practitioner",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Practitioner" ]
  }, {
    "type": "PractitionerRole",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/PractitionerRole" ]
  }, {
    "type": "Organization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Organization" ]
  }, {
    "type": "Coverage",
    "profile": [ "http://hl7.org/fhir/Coverage" ],
    "mustSupport": [ "id", "id.value" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBBU0xQQ3JkUm91dGluZUxvZ2ljCgp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4xJwovLyBUT0RPOiB1cGRhdGUgdG8gdXNlIFVTQ29yZSBkaXJlY3RseQovL3VzaW5nIFVTQ29yZSB2ZXJzaW9uICczLjEuMScKCmluY2x1ZGUgQVNMUENvbnRleHQgY2FsbGVkIEN0eAppbmNsdWRlIFVTQ29yZUNvbW1vbgppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMS4wMDAnCgp2YWx1ZXNldCAiUm91dGluZSBQcm9jZWR1cmUgVmFsdWVzZXQiOiAnaHR0cDovL3Rlcm1pbm9sb2d5LnNtaWxlY2RyLmNvbS9jcy9yb3V0aW5lJwoKY29udGV4dCBQYXRpZW50CgovLyBDUkQtNwpkZWZpbmUgIlRpdGxlIjoKICAnUHJpb3IgQXV0aCBFdmFsdWF0aW9uJwoKLy8gQ1JELTcKZGVmaW5lICJEZXNjcmlwdGlvbiI6CiAgJ0luZm9ybWF0aW9uIHJlbGF0ZWQgdG8gd2hldGhlciBhIHNlcnZpY2UgaXMgY292ZXJlZCwgbm90IGNvdmVyZWQgb3IgcmVxdWlyZXMgcHJpb3IgYXV0aCBzdWJtaXNzaW9uJyAKCi8vIENSRC03CmRlZmluZSAiUXVhbGlmaWNhdGlvbiI6CiAgJ09yZGVyIGlzIGNvdmVyZWQuIE5vIHByaW9yIGF1dGggaXMgcmVxdWlyZWQgZm9yICcgKyBDdHguIlNlcnZpY2UgUmVxdWVzdCBJdGVtIENvZGUiLmRpc3BsYXkgKyAnLicKCi8vIENSRC03CmRlZmluZSAiRGV0YWlsIFRleHQiOgogICdQcmlvciBBdXRob3JpemF0aW9uIE5vdCBSZXF1aXJlZCcKCi8vIENSRC03CmRlZmluZSAiQ292ZXJhZ2VFeHRlbnNpb24iOgogIEN0eC4iRXh0ZW5zaW9uUHJpb3JBdXRoTmVlZGVkIignY292ZXJlZCcsICduby1hdXRoJywgJ25vLWF1dGgnLCAiRGV0YWlsIFRleHQiLCAiUXVhbGlmaWNhdGlvbiIsICdpbmZvJykKCmRlZmluZSAiSXMgUm91dGluZSI6CiAgZXhpc3RzKCJSb3V0aW5lIFNlcnZpY2UgUmVxdWVzdHMiKQoKZGVmaW5lICJOb3QgUm91dGluZSI6CiAgbm90ICgiSXMgUm91dGluZSIpCgpkZWZpbmUgIlJvdXRpbmUgU2VydmljZSBSZXF1ZXN0cyI6CiAgKHsgQ3R4LiJTZXJ2aWNlIFJlcXVlc3QgSXRlbSIgfSkgUgogICAgd2hlcmUgKEN0eC5HZXRDb2RlKFIpKSBpbiAiUm91dGluZSBQcm9jZWR1cmUgVmFsdWVzZXQi"
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}